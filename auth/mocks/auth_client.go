// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	magistrala "github.com/absmach/magistrala"

	mock "github.com/stretchr/testify/mock"
)

// AuthClient is an autogenerated mock type for the AuthServiceClient type
type AuthClient struct {
	mock.Mock
}

type AuthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthClient) EXPECT() *AuthClient_Expecter {
	return &AuthClient_Expecter{mock: &_m.Mock}
}

// AddPolicies provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) AddPolicies(ctx context.Context, in *magistrala.AddPoliciesReq, opts ...grpc.CallOption) (*magistrala.AddPoliciesRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPolicies")
	}

	var r0 *magistrala.AddPoliciesRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AddPoliciesReq, ...grpc.CallOption) (*magistrala.AddPoliciesRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AddPoliciesReq, ...grpc.CallOption) *magistrala.AddPoliciesRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.AddPoliciesRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.AddPoliciesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_AddPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPolicies'
type AuthClient_AddPolicies_Call struct {
	*mock.Call
}

// AddPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.AddPoliciesReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) AddPolicies(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_AddPolicies_Call {
	return &AuthClient_AddPolicies_Call{Call: _e.mock.On("AddPolicies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_AddPolicies_Call) Run(run func(ctx context.Context, in *magistrala.AddPoliciesReq, opts ...grpc.CallOption)) *AuthClient_AddPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.AddPoliciesReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_AddPolicies_Call) Return(_a0 *magistrala.AddPoliciesRes, _a1 error) *AuthClient_AddPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_AddPolicies_Call) RunAndReturn(run func(context.Context, *magistrala.AddPoliciesReq, ...grpc.CallOption) (*magistrala.AddPoliciesRes, error)) *AuthClient_AddPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// AddPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) AddPolicy(ctx context.Context, in *magistrala.AddPolicyReq, opts ...grpc.CallOption) (*magistrala.AddPolicyRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPolicy")
	}

	var r0 *magistrala.AddPolicyRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AddPolicyReq, ...grpc.CallOption) (*magistrala.AddPolicyRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AddPolicyReq, ...grpc.CallOption) *magistrala.AddPolicyRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.AddPolicyRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.AddPolicyReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_AddPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPolicy'
type AuthClient_AddPolicy_Call struct {
	*mock.Call
}

// AddPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.AddPolicyReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) AddPolicy(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_AddPolicy_Call {
	return &AuthClient_AddPolicy_Call{Call: _e.mock.On("AddPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_AddPolicy_Call) Run(run func(ctx context.Context, in *magistrala.AddPolicyReq, opts ...grpc.CallOption)) *AuthClient_AddPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.AddPolicyReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_AddPolicy_Call) Return(_a0 *magistrala.AddPolicyRes, _a1 error) *AuthClient_AddPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_AddPolicy_Call) RunAndReturn(run func(context.Context, *magistrala.AddPolicyReq, ...grpc.CallOption) (*magistrala.AddPolicyRes, error)) *AuthClient_AddPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// Authorize provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) Authorize(ctx context.Context, in *magistrala.AuthorizeReq, opts ...grpc.CallOption) (*magistrala.AuthorizeRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *magistrala.AuthorizeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) (*magistrala.AuthorizeRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) *magistrala.AuthorizeRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.AuthorizeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type AuthClient_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.AuthorizeReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) Authorize(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_Authorize_Call {
	return &AuthClient_Authorize_Call{Call: _e.mock.On("Authorize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_Authorize_Call) Run(run func(ctx context.Context, in *magistrala.AuthorizeReq, opts ...grpc.CallOption)) *AuthClient_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.AuthorizeReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_Authorize_Call) Return(_a0 *magistrala.AuthorizeRes, _a1 error) *AuthClient_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_Authorize_Call) RunAndReturn(run func(context.Context, *magistrala.AuthorizeReq, ...grpc.CallOption) (*magistrala.AuthorizeRes, error)) *AuthClient_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// CountObjects provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) CountObjects(ctx context.Context, in *magistrala.CountObjectsReq, opts ...grpc.CallOption) (*magistrala.CountObjectsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountObjects")
	}

	var r0 *magistrala.CountObjectsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.CountObjectsReq, ...grpc.CallOption) (*magistrala.CountObjectsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.CountObjectsReq, ...grpc.CallOption) *magistrala.CountObjectsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.CountObjectsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.CountObjectsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_CountObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountObjects'
type AuthClient_CountObjects_Call struct {
	*mock.Call
}

// CountObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.CountObjectsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) CountObjects(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_CountObjects_Call {
	return &AuthClient_CountObjects_Call{Call: _e.mock.On("CountObjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_CountObjects_Call) Run(run func(ctx context.Context, in *magistrala.CountObjectsReq, opts ...grpc.CallOption)) *AuthClient_CountObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.CountObjectsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_CountObjects_Call) Return(_a0 *magistrala.CountObjectsRes, _a1 error) *AuthClient_CountObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_CountObjects_Call) RunAndReturn(run func(context.Context, *magistrala.CountObjectsReq, ...grpc.CallOption) (*magistrala.CountObjectsRes, error)) *AuthClient_CountObjects_Call {
	_c.Call.Return(run)
	return _c
}

// CountSubjects provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) CountSubjects(ctx context.Context, in *magistrala.CountSubjectsReq, opts ...grpc.CallOption) (*magistrala.CountSubjectsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountSubjects")
	}

	var r0 *magistrala.CountSubjectsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.CountSubjectsReq, ...grpc.CallOption) (*magistrala.CountSubjectsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.CountSubjectsReq, ...grpc.CallOption) *magistrala.CountSubjectsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.CountSubjectsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.CountSubjectsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_CountSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSubjects'
type AuthClient_CountSubjects_Call struct {
	*mock.Call
}

// CountSubjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.CountSubjectsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) CountSubjects(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_CountSubjects_Call {
	return &AuthClient_CountSubjects_Call{Call: _e.mock.On("CountSubjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_CountSubjects_Call) Run(run func(ctx context.Context, in *magistrala.CountSubjectsReq, opts ...grpc.CallOption)) *AuthClient_CountSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.CountSubjectsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_CountSubjects_Call) Return(_a0 *magistrala.CountSubjectsRes, _a1 error) *AuthClient_CountSubjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_CountSubjects_Call) RunAndReturn(run func(context.Context, *magistrala.CountSubjectsReq, ...grpc.CallOption) (*magistrala.CountSubjectsRes, error)) *AuthClient_CountSubjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEntityPolicies provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) DeleteEntityPolicies(ctx context.Context, in *magistrala.DeleteEntityPoliciesReq, opts ...grpc.CallOption) (*magistrala.DeletePolicyRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntityPolicies")
	}

	var r0 *magistrala.DeletePolicyRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.DeleteEntityPoliciesReq, ...grpc.CallOption) (*magistrala.DeletePolicyRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.DeleteEntityPoliciesReq, ...grpc.CallOption) *magistrala.DeletePolicyRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.DeletePolicyRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.DeleteEntityPoliciesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_DeleteEntityPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntityPolicies'
type AuthClient_DeleteEntityPolicies_Call struct {
	*mock.Call
}

// DeleteEntityPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.DeleteEntityPoliciesReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) DeleteEntityPolicies(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_DeleteEntityPolicies_Call {
	return &AuthClient_DeleteEntityPolicies_Call{Call: _e.mock.On("DeleteEntityPolicies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_DeleteEntityPolicies_Call) Run(run func(ctx context.Context, in *magistrala.DeleteEntityPoliciesReq, opts ...grpc.CallOption)) *AuthClient_DeleteEntityPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.DeleteEntityPoliciesReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_DeleteEntityPolicies_Call) Return(_a0 *magistrala.DeletePolicyRes, _a1 error) *AuthClient_DeleteEntityPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_DeleteEntityPolicies_Call) RunAndReturn(run func(context.Context, *magistrala.DeleteEntityPoliciesReq, ...grpc.CallOption) (*magistrala.DeletePolicyRes, error)) *AuthClient_DeleteEntityPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicies provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) DeletePolicies(ctx context.Context, in *magistrala.DeletePoliciesReq, opts ...grpc.CallOption) (*magistrala.DeletePolicyRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicies")
	}

	var r0 *magistrala.DeletePolicyRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.DeletePoliciesReq, ...grpc.CallOption) (*magistrala.DeletePolicyRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.DeletePoliciesReq, ...grpc.CallOption) *magistrala.DeletePolicyRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.DeletePolicyRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.DeletePoliciesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_DeletePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicies'
type AuthClient_DeletePolicies_Call struct {
	*mock.Call
}

// DeletePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.DeletePoliciesReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) DeletePolicies(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_DeletePolicies_Call {
	return &AuthClient_DeletePolicies_Call{Call: _e.mock.On("DeletePolicies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_DeletePolicies_Call) Run(run func(ctx context.Context, in *magistrala.DeletePoliciesReq, opts ...grpc.CallOption)) *AuthClient_DeletePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.DeletePoliciesReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_DeletePolicies_Call) Return(_a0 *magistrala.DeletePolicyRes, _a1 error) *AuthClient_DeletePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_DeletePolicies_Call) RunAndReturn(run func(context.Context, *magistrala.DeletePoliciesReq, ...grpc.CallOption) (*magistrala.DeletePolicyRes, error)) *AuthClient_DeletePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyFilter provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) DeletePolicyFilter(ctx context.Context, in *magistrala.DeletePolicyFilterReq, opts ...grpc.CallOption) (*magistrala.DeletePolicyRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyFilter")
	}

	var r0 *magistrala.DeletePolicyRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.DeletePolicyFilterReq, ...grpc.CallOption) (*magistrala.DeletePolicyRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.DeletePolicyFilterReq, ...grpc.CallOption) *magistrala.DeletePolicyRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.DeletePolicyRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.DeletePolicyFilterReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_DeletePolicyFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyFilter'
type AuthClient_DeletePolicyFilter_Call struct {
	*mock.Call
}

// DeletePolicyFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.DeletePolicyFilterReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) DeletePolicyFilter(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_DeletePolicyFilter_Call {
	return &AuthClient_DeletePolicyFilter_Call{Call: _e.mock.On("DeletePolicyFilter",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_DeletePolicyFilter_Call) Run(run func(ctx context.Context, in *magistrala.DeletePolicyFilterReq, opts ...grpc.CallOption)) *AuthClient_DeletePolicyFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.DeletePolicyFilterReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_DeletePolicyFilter_Call) Return(_a0 *magistrala.DeletePolicyRes, _a1 error) *AuthClient_DeletePolicyFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_DeletePolicyFilter_Call) RunAndReturn(run func(context.Context, *magistrala.DeletePolicyFilterReq, ...grpc.CallOption) (*magistrala.DeletePolicyRes, error)) *AuthClient_DeletePolicyFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Identify provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) Identify(ctx context.Context, in *magistrala.IdentityReq, opts ...grpc.CallOption) (*magistrala.IdentityRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Identify")
	}

	var r0 *magistrala.IdentityRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.IdentityReq, ...grpc.CallOption) (*magistrala.IdentityRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.IdentityReq, ...grpc.CallOption) *magistrala.IdentityRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.IdentityRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.IdentityReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_Identify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identify'
type AuthClient_Identify_Call struct {
	*mock.Call
}

// Identify is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.IdentityReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) Identify(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_Identify_Call {
	return &AuthClient_Identify_Call{Call: _e.mock.On("Identify",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_Identify_Call) Run(run func(ctx context.Context, in *magistrala.IdentityReq, opts ...grpc.CallOption)) *AuthClient_Identify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.IdentityReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_Identify_Call) Return(_a0 *magistrala.IdentityRes, _a1 error) *AuthClient_Identify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_Identify_Call) RunAndReturn(run func(context.Context, *magistrala.IdentityReq, ...grpc.CallOption) (*magistrala.IdentityRes, error)) *AuthClient_Identify_Call {
	_c.Call.Return(run)
	return _c
}

// Issue provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) Issue(ctx context.Context, in *magistrala.IssueReq, opts ...grpc.CallOption) (*magistrala.Token, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 *magistrala.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.IssueReq, ...grpc.CallOption) (*magistrala.Token, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.IssueReq, ...grpc.CallOption) *magistrala.Token); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.IssueReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_Issue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issue'
type AuthClient_Issue_Call struct {
	*mock.Call
}

// Issue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.IssueReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) Issue(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_Issue_Call {
	return &AuthClient_Issue_Call{Call: _e.mock.On("Issue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_Issue_Call) Run(run func(ctx context.Context, in *magistrala.IssueReq, opts ...grpc.CallOption)) *AuthClient_Issue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.IssueReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_Issue_Call) Return(_a0 *magistrala.Token, _a1 error) *AuthClient_Issue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_Issue_Call) RunAndReturn(run func(context.Context, *magistrala.IssueReq, ...grpc.CallOption) (*magistrala.Token, error)) *AuthClient_Issue_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllObjects provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) ListAllObjects(ctx context.Context, in *magistrala.ListObjectsReq, opts ...grpc.CallOption) (*magistrala.ListObjectsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllObjects")
	}

	var r0 *magistrala.ListObjectsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) (*magistrala.ListObjectsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) *magistrala.ListObjectsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.ListObjectsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_ListAllObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllObjects'
type AuthClient_ListAllObjects_Call struct {
	*mock.Call
}

// ListAllObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.ListObjectsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) ListAllObjects(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_ListAllObjects_Call {
	return &AuthClient_ListAllObjects_Call{Call: _e.mock.On("ListAllObjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_ListAllObjects_Call) Run(run func(ctx context.Context, in *magistrala.ListObjectsReq, opts ...grpc.CallOption)) *AuthClient_ListAllObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.ListObjectsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_ListAllObjects_Call) Return(_a0 *magistrala.ListObjectsRes, _a1 error) *AuthClient_ListAllObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_ListAllObjects_Call) RunAndReturn(run func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) (*magistrala.ListObjectsRes, error)) *AuthClient_ListAllObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllSubjects provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) ListAllSubjects(ctx context.Context, in *magistrala.ListSubjectsReq, opts ...grpc.CallOption) (*magistrala.ListSubjectsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllSubjects")
	}

	var r0 *magistrala.ListSubjectsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) (*magistrala.ListSubjectsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) *magistrala.ListSubjectsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.ListSubjectsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_ListAllSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllSubjects'
type AuthClient_ListAllSubjects_Call struct {
	*mock.Call
}

// ListAllSubjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.ListSubjectsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) ListAllSubjects(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_ListAllSubjects_Call {
	return &AuthClient_ListAllSubjects_Call{Call: _e.mock.On("ListAllSubjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_ListAllSubjects_Call) Run(run func(ctx context.Context, in *magistrala.ListSubjectsReq, opts ...grpc.CallOption)) *AuthClient_ListAllSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.ListSubjectsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_ListAllSubjects_Call) Return(_a0 *magistrala.ListSubjectsRes, _a1 error) *AuthClient_ListAllSubjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_ListAllSubjects_Call) RunAndReturn(run func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) (*magistrala.ListSubjectsRes, error)) *AuthClient_ListAllSubjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) ListObjects(ctx context.Context, in *magistrala.ListObjectsReq, opts ...grpc.CallOption) (*magistrala.ListObjectsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 *magistrala.ListObjectsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) (*magistrala.ListObjectsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) *magistrala.ListObjectsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.ListObjectsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type AuthClient_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.ListObjectsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) ListObjects(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_ListObjects_Call {
	return &AuthClient_ListObjects_Call{Call: _e.mock.On("ListObjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_ListObjects_Call) Run(run func(ctx context.Context, in *magistrala.ListObjectsReq, opts ...grpc.CallOption)) *AuthClient_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.ListObjectsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_ListObjects_Call) Return(_a0 *magistrala.ListObjectsRes, _a1 error) *AuthClient_ListObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_ListObjects_Call) RunAndReturn(run func(context.Context, *magistrala.ListObjectsReq, ...grpc.CallOption) (*magistrala.ListObjectsRes, error)) *AuthClient_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListPermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) ListPermissions(ctx context.Context, in *magistrala.ListPermissionsReq, opts ...grpc.CallOption) (*magistrala.ListPermissionsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissions")
	}

	var r0 *magistrala.ListPermissionsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListPermissionsReq, ...grpc.CallOption) (*magistrala.ListPermissionsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListPermissionsReq, ...grpc.CallOption) *magistrala.ListPermissionsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.ListPermissionsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.ListPermissionsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_ListPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPermissions'
type AuthClient_ListPermissions_Call struct {
	*mock.Call
}

// ListPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.ListPermissionsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) ListPermissions(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_ListPermissions_Call {
	return &AuthClient_ListPermissions_Call{Call: _e.mock.On("ListPermissions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_ListPermissions_Call) Run(run func(ctx context.Context, in *magistrala.ListPermissionsReq, opts ...grpc.CallOption)) *AuthClient_ListPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.ListPermissionsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_ListPermissions_Call) Return(_a0 *magistrala.ListPermissionsRes, _a1 error) *AuthClient_ListPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_ListPermissions_Call) RunAndReturn(run func(context.Context, *magistrala.ListPermissionsReq, ...grpc.CallOption) (*magistrala.ListPermissionsRes, error)) *AuthClient_ListPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubjects provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) ListSubjects(ctx context.Context, in *magistrala.ListSubjectsReq, opts ...grpc.CallOption) (*magistrala.ListSubjectsRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubjects")
	}

	var r0 *magistrala.ListSubjectsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) (*magistrala.ListSubjectsRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) *magistrala.ListSubjectsRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.ListSubjectsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_ListSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubjects'
type AuthClient_ListSubjects_Call struct {
	*mock.Call
}

// ListSubjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.ListSubjectsReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) ListSubjects(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_ListSubjects_Call {
	return &AuthClient_ListSubjects_Call{Call: _e.mock.On("ListSubjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_ListSubjects_Call) Run(run func(ctx context.Context, in *magistrala.ListSubjectsReq, opts ...grpc.CallOption)) *AuthClient_ListSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.ListSubjectsReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_ListSubjects_Call) Return(_a0 *magistrala.ListSubjectsRes, _a1 error) *AuthClient_ListSubjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_ListSubjects_Call) RunAndReturn(run func(context.Context, *magistrala.ListSubjectsReq, ...grpc.CallOption) (*magistrala.ListSubjectsRes, error)) *AuthClient_ListSubjects_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, in, opts
func (_m *AuthClient) Refresh(ctx context.Context, in *magistrala.RefreshReq, opts ...grpc.CallOption) (*magistrala.Token, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *magistrala.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.RefreshReq, ...grpc.CallOption) (*magistrala.Token, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *magistrala.RefreshReq, ...grpc.CallOption) *magistrala.Token); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*magistrala.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *magistrala.RefreshReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClient_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type AuthClient_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - in *magistrala.RefreshReq
//   - opts ...grpc.CallOption
func (_e *AuthClient_Expecter) Refresh(ctx interface{}, in interface{}, opts ...interface{}) *AuthClient_Refresh_Call {
	return &AuthClient_Refresh_Call{Call: _e.mock.On("Refresh",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthClient_Refresh_Call) Run(run func(ctx context.Context, in *magistrala.RefreshReq, opts ...grpc.CallOption)) *AuthClient_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*magistrala.RefreshReq), variadicArgs...)
	})
	return _c
}

func (_c *AuthClient_Refresh_Call) Return(_a0 *magistrala.Token, _a1 error) *AuthClient_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClient_Refresh_Call) RunAndReturn(run func(context.Context, *magistrala.RefreshReq, ...grpc.CallOption) (*magistrala.Token, error)) *AuthClient_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthClient creates a new instance of AuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthClient {
	mock := &AuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
