%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.9.0
-module(message).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'mainflux.RawMessage'() ::
      #{channel                 => iodata(),        % = 1
        subtopic                => iodata(),        % = 2
        publisher               => iodata(),        % = 3
        protocol                => iodata(),        % = 4
        contentType             => iodata(),        % = 5
        payload                 => iodata()         % = 6
       }.

-type 'mainflux.Message'() ::
      #{channel                 => iodata(),        % = 1
        subtopic                => iodata(),        % = 2
        publisher               => iodata(),        % = 3
        protocol                => iodata(),        % = 4
        name                    => iodata(),        % = 5
        unit                    => iodata(),        % = 6
        value                   => {floatValue, float() | integer() | infinity | '-infinity' | nan} | {stringValue, iodata()} | {boolValue, boolean() | 0 | 1} | {dataValue, iodata()}, % oneof
        valueSum                => 'mainflux.SumValue'(), % = 11
        time                    => float() | integer() | infinity | '-infinity' | nan, % = 12
        updateTime              => float() | integer() | infinity | '-infinity' | nan, % = 13
        link                    => iodata()         % = 14
       }.

-type 'mainflux.SumValue'() ::
      #{value                   => float() | integer() | infinity | '-infinity' | nan % = 1
       }.

-export_type(['mainflux.RawMessage'/0, 'mainflux.Message'/0, 'mainflux.SumValue'/0]).

-spec encode_msg('mainflux.RawMessage'() | 'mainflux.Message'() | 'mainflux.SumValue'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('mainflux.RawMessage'() | 'mainflux.Message'() | 'mainflux.SumValue'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'mainflux.RawMessage' ->
	  'encode_msg_mainflux.RawMessage'(id(Msg, TrUserData),
					   TrUserData);
      'mainflux.Message' ->
	  'encode_msg_mainflux.Message'(id(Msg, TrUserData),
					TrUserData);
      'mainflux.SumValue' ->
	  'encode_msg_mainflux.SumValue'(id(Msg, TrUserData),
					 TrUserData)
    end.


'encode_msg_mainflux.RawMessage'(Msg, TrUserData) ->
    'encode_msg_mainflux.RawMessage'(Msg, <<>>, TrUserData).


'encode_msg_mainflux.RawMessage'(#{} = M, Bin,
				 TrUserData) ->
    B1 = case M of
	   #{channel := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{subtopic := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{publisher := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{protocol := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{contentType := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case is_empty_string(TrF5) of
		   true -> B4;
		   false ->
		       e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    case M of
      #{payload := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    case iolist_size(TrF6) of
	      0 -> B5;
	      _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
	    end
	  end;
      _ -> B5
    end.

'encode_msg_mainflux.Message'(Msg, TrUserData) ->
    'encode_msg_mainflux.Message'(Msg, <<>>, TrUserData).


'encode_msg_mainflux.Message'(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{channel := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{subtopic := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{publisher := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{protocol := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{name := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case is_empty_string(TrF5) of
		   true -> B4;
		   false ->
		       e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{unit := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 case is_empty_string(TrF6) of
		   true -> B5;
		   false ->
		       e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{value := F7} ->
	       case id(F7, TrUserData) of
		 {floatValue, TF7} ->
		     begin
		       TrTF7 = id(TF7, TrUserData),
		       e_type_double(TrTF7, <<B6/binary, 57>>, TrUserData)
		     end;
		 {stringValue, TF7} ->
		     begin
		       TrTF7 = id(TF7, TrUserData),
		       e_type_string(TrTF7, <<B6/binary, 66>>, TrUserData)
		     end;
		 {boolValue, TF7} ->
		     begin
		       TrTF7 = id(TF7, TrUserData),
		       e_type_bool(TrTF7, <<B6/binary, 72>>, TrUserData)
		     end;
		 {dataValue, TF7} ->
		     begin
		       TrTF7 = id(TF7, TrUserData),
		       e_type_string(TrTF7, <<B6/binary, 82>>, TrUserData)
		     end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{valueSum := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= undefined -> B7;
		    true ->
			'e_mfield_mainflux.Message_valueSum'(TrF8,
							     <<B7/binary, 90>>,
							     TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{time := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= 0.0 -> B8;
		    true ->
			e_type_double(TrF9, <<B8/binary, 97>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{updateTime := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= 0.0 -> B9;
		     true ->
			 e_type_double(TrF10, <<B9/binary, 105>>, TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    case M of
      #{link := F11} ->
	  begin
	    TrF11 = id(F11, TrUserData),
	    case is_empty_string(TrF11) of
	      true -> B10;
	      false ->
		  e_type_string(TrF11, <<B10/binary, 114>>, TrUserData)
	    end
	  end;
      _ -> B10
    end.

'encode_msg_mainflux.SumValue'(Msg, TrUserData) ->
    'encode_msg_mainflux.SumValue'(Msg, <<>>, TrUserData).


'encode_msg_mainflux.SumValue'(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

'e_mfield_mainflux.Message_valueSum'(Msg, Bin,
				     TrUserData) ->
    SubBin = 'encode_msg_mainflux.SumValue'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('mainflux.RawMessage', Bin,
		  TrUserData) ->
    id('decode_msg_mainflux.RawMessage'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('mainflux.Message', Bin,
		  TrUserData) ->
    id('decode_msg_mainflux.Message'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('mainflux.SumValue', Bin,
		  TrUserData) ->
    id('decode_msg_mainflux.SumValue'(Bin, TrUserData),
       TrUserData).



'decode_msg_mainflux.RawMessage'(Bin, TrUserData) ->
    'dfp_read_field_def_mainflux.RawMessage'(Bin, 0, 0,
					     id([], TrUserData),
					     id([], TrUserData),
					     id([], TrUserData),
					     id([], TrUserData),
					     id([], TrUserData),
					     id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_mainflux.RawMessage'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    'd_field_mainflux.RawMessage_channel'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
'dfp_read_field_def_mainflux.RawMessage'(<<18,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    'd_field_mainflux.RawMessage_subtopic'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
'dfp_read_field_def_mainflux.RawMessage'(<<26,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    'd_field_mainflux.RawMessage_publisher'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
'dfp_read_field_def_mainflux.RawMessage'(<<34,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    'd_field_mainflux.RawMessage_protocol'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
'dfp_read_field_def_mainflux.RawMessage'(<<42,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    'd_field_mainflux.RawMessage_contentType'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
'dfp_read_field_def_mainflux.RawMessage'(<<50,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    'd_field_mainflux.RawMessage_payload'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
'dfp_read_field_def_mainflux.RawMessage'(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 _) ->
    #{channel => F@_1, subtopic => F@_2, publisher => F@_3,
      protocol => F@_4, contentType => F@_5, payload => F@_6};
'dfp_read_field_def_mainflux.RawMessage'(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData) ->
    'dg_read_field_def_mainflux.RawMessage'(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData).

'dg_read_field_def_mainflux.RawMessage'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_mainflux.RawMessage'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, TrUserData);
'dg_read_field_def_mainflux.RawMessage'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mainflux.RawMessage_channel'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      18 ->
	  'd_field_mainflux.RawMessage_subtopic'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      26 ->
	  'd_field_mainflux.RawMessage_publisher'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, TrUserData);
      34 ->
	  'd_field_mainflux.RawMessage_protocol'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      42 ->
	  'd_field_mainflux.RawMessage_contentType'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      50 ->
	  'd_field_mainflux.RawMessage_payload'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mainflux.RawMessage'(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
	    1 ->
		'skip_64_mainflux.RawMessage'(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
	    2 ->
		'skip_length_delimited_mainflux.RawMessage'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5, F@_6,
							    TrUserData);
	    3 ->
		'skip_group_mainflux.RawMessage'(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, F@_4, F@_5,
						 F@_6, TrUserData);
	    5 ->
		'skip_32_mainflux.RawMessage'(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6,
					      TrUserData)
	  end
    end;
'dg_read_field_def_mainflux.RawMessage'(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					_) ->
    #{channel => F@_1, subtopic => F@_2, publisher => F@_3,
      protocol => F@_4, contentType => F@_5, payload => F@_6}.

'd_field_mainflux.RawMessage_channel'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    'd_field_mainflux.RawMessage_channel'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
'd_field_mainflux.RawMessage_channel'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.RawMessage'(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, F@_4, F@_5,
					     F@_6, TrUserData).

'd_field_mainflux.RawMessage_subtopic'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    'd_field_mainflux.RawMessage_subtopic'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
'd_field_mainflux.RawMessage_subtopic'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.RawMessage'(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, F@_4, F@_5,
					     F@_6, TrUserData).

'd_field_mainflux.RawMessage_publisher'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData)
    when N < 57 ->
    'd_field_mainflux.RawMessage_publisher'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, TrUserData);
'd_field_mainflux.RawMessage_publisher'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
					TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.RawMessage'(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, F@_4, F@_5,
					     F@_6, TrUserData).

'd_field_mainflux.RawMessage_protocol'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    'd_field_mainflux.RawMessage_protocol'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
'd_field_mainflux.RawMessage_protocol'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.RawMessage'(RestF, 0, 0,
					     F@_1, F@_2, F@_3, NewFValue, F@_5,
					     F@_6, TrUserData).

'd_field_mainflux.RawMessage_contentType'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    'd_field_mainflux.RawMessage_contentType'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
'd_field_mainflux.RawMessage_contentType'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					  F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.RawMessage'(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, NewFValue,
					     F@_6, TrUserData).

'd_field_mainflux.RawMessage_payload'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    'd_field_mainflux.RawMessage_payload'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
'd_field_mainflux.RawMessage_payload'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_mainflux.RawMessage'(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     NewFValue, TrUserData).

'skip_varint_mainflux.RawMessage'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    'skip_varint_mainflux.RawMessage'(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'skip_varint_mainflux.RawMessage'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    'dfp_read_field_def_mainflux.RawMessage'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData).

'skip_length_delimited_mainflux.RawMessage'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, TrUserData)
    when N < 57 ->
    'skip_length_delimited_mainflux.RawMessage'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, TrUserData);
'skip_length_delimited_mainflux.RawMessage'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mainflux.RawMessage'(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData).

'skip_group_mainflux.RawMessage'(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_mainflux.RawMessage'(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData).

'skip_32_mainflux.RawMessage'(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    'dfp_read_field_def_mainflux.RawMessage'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData).

'skip_64_mainflux.RawMessage'(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    'dfp_read_field_def_mainflux.RawMessage'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData).

'decode_msg_mainflux.Message'(Bin, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Bin, 0, 0,
					  id([], TrUserData),
					  id([], TrUserData),
					  id([], TrUserData),
					  id([], TrUserData),
					  id([], TrUserData),
					  id([], TrUserData),
					  id('$undef', TrUserData),
					  id('$undef', TrUserData),
					  id(0.0, TrUserData),
					  id(0.0, TrUserData),
					  id([], TrUserData), TrUserData).

'dfp_read_field_def_mainflux.Message'(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_channel'(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_subtopic'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_publisher'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_protocol'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<42,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_name'(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<50,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_unit'(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<57,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_floatValue'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
'dfp_read_field_def_mainflux.Message'(<<66,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_stringValue'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData);
'dfp_read_field_def_mainflux.Message'(<<72,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_boolValue'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<82,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_dataValue'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<90,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_valueSum'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<97,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_time'(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<105,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_updateTime'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
'dfp_read_field_def_mainflux.Message'(<<114,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'd_field_mainflux.Message_link'(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_mainflux.Message'(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, _) ->
    S1 = #{channel => F@_1, subtopic => F@_2,
	   publisher => F@_3, protocol => F@_4, name => F@_5,
	   unit => F@_6, time => F@_9, updateTime => F@_10,
	   link => F@_11},
    S2 = if F@_7 == '$undef' -> S1;
	    true -> S1#{value => F@_7}
	 end,
    if F@_8 == '$undef' -> S2;
       true -> S2#{valueSum => F@_8}
    end;
'dfp_read_field_def_mainflux.Message'(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dg_read_field_def_mainflux.Message'(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

'dg_read_field_def_mainflux.Message'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_mainflux.Message'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, TrUserData);
'dg_read_field_def_mainflux.Message'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_mainflux.Message_channel'(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
      18 ->
	  'd_field_mainflux.Message_subtopic'(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      26 ->
	  'd_field_mainflux.Message_publisher'(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
      34 ->
	  'd_field_mainflux.Message_protocol'(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      42 ->
	  'd_field_mainflux.Message_name'(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      50 ->
	  'd_field_mainflux.Message_unit'(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      57 ->
	  'd_field_mainflux.Message_floatValue'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						TrUserData);
      66 ->
	  'd_field_mainflux.Message_stringValue'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10, F@_11,
						 TrUserData);
      72 ->
	  'd_field_mainflux.Message_boolValue'(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
      82 ->
	  'd_field_mainflux.Message_dataValue'(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
      90 ->
	  'd_field_mainflux.Message_valueSum'(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      97 ->
	  'd_field_mainflux.Message_time'(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      105 ->
	  'd_field_mainflux.Message_updateTime'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						TrUserData);
      114 ->
	  'd_field_mainflux.Message_link'(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mainflux.Message'(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
	    1 ->
		'skip_64_mainflux.Message'(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, TrUserData);
	    2 ->
		'skip_length_delimited_mainflux.Message'(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10, F@_11,
							 TrUserData);
	    3 ->
		'skip_group_mainflux.Message'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
	    5 ->
		'skip_32_mainflux.Message'(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, TrUserData)
	  end
    end;
'dg_read_field_def_mainflux.Message'(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, _) ->
    S1 = #{channel => F@_1, subtopic => F@_2,
	   publisher => F@_3, protocol => F@_4, name => F@_5,
	   unit => F@_6, time => F@_9, updateTime => F@_10,
	   link => F@_11},
    S2 = if F@_7 == '$undef' -> S1;
	    true -> S1#{value => F@_7}
	 end,
    if F@_8 == '$undef' -> S2;
       true -> S2#{valueSum => F@_8}
    end.

'd_field_mainflux.Message_channel'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_channel'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, TrUserData);
'd_field_mainflux.Message_channel'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'd_field_mainflux.Message_subtopic'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_subtopic'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
'd_field_mainflux.Message_subtopic'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'd_field_mainflux.Message_publisher'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_publisher'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, TrUserData);
'd_field_mainflux.Message_publisher'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'd_field_mainflux.Message_protocol'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_protocol'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
'd_field_mainflux.Message_protocol'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'd_field_mainflux.Message_name'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_name'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
'd_field_mainflux.Message_name'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'd_field_mainflux.Message_unit'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_unit'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
'd_field_mainflux.Message_unit'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, NewFValue,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'd_field_mainflux.Message_floatValue'(<<0:48, 240, 127,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({floatValue,
					      id(infinity, TrUserData)},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_mainflux.Message_floatValue'(<<0:48, 240, 255,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({floatValue,
					      id('-infinity', TrUserData)},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_mainflux.Message_floatValue'(<<_:48, 15:4, _:4,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({floatValue, id(nan, TrUserData)},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_mainflux.Message_floatValue'(<<Value:64/little-float,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({floatValue,
					      id(Value, TrUserData)},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_mainflux.Message_stringValue'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				       TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_stringValue'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, TrUserData);
'd_field_mainflux.Message_stringValue'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, _, F@_8, F@_9, F@_10, F@_11,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({stringValue, NewFValue},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_mainflux.Message_boolValue'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_boolValue'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, TrUserData);
'd_field_mainflux.Message_boolValue'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({boolValue, NewFValue},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_mainflux.Message_dataValue'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_dataValue'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, TrUserData);
'd_field_mainflux.Message_dataValue'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  id({dataValue, NewFValue},
					     TrUserData),
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_mainflux.Message_valueSum'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_valueSum'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
'd_field_mainflux.Message_valueSum'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, Prev, F@_9, F@_10, F@_11,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_mainflux.SumValue'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 'merge_msg_mainflux.SumValue'(Prev,
									       NewFValue,
									       TrUserData)
					  end,
					  F@_9, F@_10, F@_11, TrUserData).

'd_field_mainflux.Message_time'(<<0:48, 240, 127,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, id(infinity, TrUserData),
					  F@_10, F@_11, TrUserData);
'd_field_mainflux.Message_time'(<<0:48, 240, 255,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8,
					  id('-infinity', TrUserData), F@_10,
					  F@_11, TrUserData);
'd_field_mainflux.Message_time'(<<_:48, 15:4, _:4, _:1,
				  127:7, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, id(nan, TrUserData),
					  F@_10, F@_11, TrUserData);
'd_field_mainflux.Message_time'(<<Value:64/little-float,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, id(Value, TrUserData),
					  F@_10, F@_11, TrUserData).

'd_field_mainflux.Message_updateTime'(<<0:48, 240, 127,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, _, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9,
					  id(infinity, TrUserData), F@_11,
					  TrUserData);
'd_field_mainflux.Message_updateTime'(<<0:48, 240, 255,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, _, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9,
					  id('-infinity', TrUserData), F@_11,
					  TrUserData);
'd_field_mainflux.Message_updateTime'(<<_:48, 15:4, _:4,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, _, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, id(nan, TrUserData),
					  F@_11, TrUserData);
'd_field_mainflux.Message_updateTime'(<<Value:64/little-float,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, _, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9,
					  id(Value, TrUserData), F@_11,
					  TrUserData).

'd_field_mainflux.Message_link'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_mainflux.Message_link'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
'd_field_mainflux.Message_link'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_mainflux.Message'(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, NewFValue,
					  TrUserData).

'skip_varint_mainflux.Message'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'skip_varint_mainflux.Message'(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, TrUserData);
'skip_varint_mainflux.Message'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'skip_length_delimited_mainflux.Message'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData)
    when N < 57 ->
    'skip_length_delimited_mainflux.Message'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData);
'skip_length_delimited_mainflux.Message'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mainflux.Message'(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_group_mainflux.Message'(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_mainflux.Message'(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_32_mainflux.Message'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'skip_64_mainflux.Message'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_mainflux.Message'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

'decode_msg_mainflux.SumValue'(Bin, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Bin, 0, 0,
					   id(0.0, TrUserData), TrUserData).

'dfp_read_field_def_mainflux.SumValue'(<<9,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'd_field_mainflux.SumValue_value'(Rest, Z1, Z2, F@_1,
				      TrUserData);
'dfp_read_field_def_mainflux.SumValue'(<<>>, 0, 0, F@_1,
				       _) ->
    #{value => F@_1};
'dfp_read_field_def_mainflux.SumValue'(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    'dg_read_field_def_mainflux.SumValue'(Other, Z1, Z2,
					  F@_1, TrUserData).

'dg_read_field_def_mainflux.SumValue'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_mainflux.SumValue'(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_mainflux.SumValue'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_mainflux.SumValue_value'(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_mainflux.SumValue'(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		'skip_64_mainflux.SumValue'(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		'skip_length_delimited_mainflux.SumValue'(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		'skip_group_mainflux.SumValue'(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		'skip_32_mainflux.SumValue'(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
'dg_read_field_def_mainflux.SumValue'(<<>>, 0, 0, F@_1,
				      _) ->
    #{value => F@_1}.

'd_field_mainflux.SumValue_value'(<<0:48, 240, 127,
				    Rest/binary>>,
				  Z1, Z2, _, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   id(infinity, TrUserData),
					   TrUserData);
'd_field_mainflux.SumValue_value'(<<0:48, 240, 255,
				    Rest/binary>>,
				  Z1, Z2, _, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   id('-infinity', TrUserData),
					   TrUserData);
'd_field_mainflux.SumValue_value'(<<_:48, 15:4, _:4,
				    _:1, 127:7, Rest/binary>>,
				  Z1, Z2, _, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   id(nan, TrUserData), TrUserData);
'd_field_mainflux.SumValue_value'(<<Value:64/little-float,
				    Rest/binary>>,
				  Z1, Z2, _, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   id(Value, TrUserData), TrUserData).

'skip_varint_mainflux.SumValue'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_mainflux.SumValue'(Rest, Z1, Z2, F@_1,
				    TrUserData);
'skip_varint_mainflux.SumValue'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   F@_1, TrUserData).

'skip_length_delimited_mainflux.SumValue'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_mainflux.SumValue'(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
'skip_length_delimited_mainflux.SumValue'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_mainflux.SumValue'(Rest2, 0, 0,
					   F@_1, TrUserData).

'skip_group_mainflux.SumValue'(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_mainflux.SumValue'(Rest, 0, Z2,
					   F@_1, TrUserData).

'skip_32_mainflux.SumValue'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   F@_1, TrUserData).

'skip_64_mainflux.SumValue'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_mainflux.SumValue'(Rest, Z1, Z2,
					   F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'mainflux.RawMessage' ->
	  'merge_msg_mainflux.RawMessage'(Prev, New, TrUserData);
      'mainflux.Message' ->
	  'merge_msg_mainflux.Message'(Prev, New, TrUserData);
      'mainflux.SumValue' ->
	  'merge_msg_mainflux.SumValue'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_mainflux.RawMessage'/3}).
'merge_msg_mainflux.RawMessage'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{channel := NFchannel}} ->
	       S1#{channel => NFchannel};
	   {#{channel := PFchannel}, _} ->
	       S1#{channel => PFchannel};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{subtopic := NFsubtopic}} ->
	       S2#{subtopic => NFsubtopic};
	   {#{subtopic := PFsubtopic}, _} ->
	       S2#{subtopic => PFsubtopic};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{publisher := NFpublisher}} ->
	       S3#{publisher => NFpublisher};
	   {#{publisher := PFpublisher}, _} ->
	       S3#{publisher => PFpublisher};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{protocol := NFprotocol}} ->
	       S4#{protocol => NFprotocol};
	   {#{protocol := PFprotocol}, _} ->
	       S4#{protocol => PFprotocol};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{contentType := NFcontentType}} ->
	       S5#{contentType => NFcontentType};
	   {#{contentType := PFcontentType}, _} ->
	       S5#{contentType => PFcontentType};
	   _ -> S5
	 end,
    case {PMsg, NMsg} of
      {_, #{payload := NFpayload}} ->
	  S6#{payload => NFpayload};
      {#{payload := PFpayload}, _} ->
	  S6#{payload => PFpayload};
      _ -> S6
    end.

-compile({nowarn_unused_function,'merge_msg_mainflux.Message'/3}).
'merge_msg_mainflux.Message'(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{channel := NFchannel}} ->
	       S1#{channel => NFchannel};
	   {#{channel := PFchannel}, _} ->
	       S1#{channel => PFchannel};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{subtopic := NFsubtopic}} ->
	       S2#{subtopic => NFsubtopic};
	   {#{subtopic := PFsubtopic}, _} ->
	       S2#{subtopic => PFsubtopic};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{publisher := NFpublisher}} ->
	       S3#{publisher => NFpublisher};
	   {#{publisher := PFpublisher}, _} ->
	       S3#{publisher => PFpublisher};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{protocol := NFprotocol}} ->
	       S4#{protocol => NFprotocol};
	   {#{protocol := PFprotocol}, _} ->
	       S4#{protocol => PFprotocol};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S5#{name => NFname};
	   {#{name := PFname}, _} -> S5#{name => PFname};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{unit := NFunit}} -> S6#{unit => NFunit};
	   {#{unit := PFunit}, _} -> S6#{unit => PFunit};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S7#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S7#{value => PFvalue};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {#{valueSum := PFvalueSum},
	    #{valueSum := NFvalueSum}} ->
	       S8#{valueSum =>
		       'merge_msg_mainflux.SumValue'(PFvalueSum, NFvalueSum,
						     TrUserData)};
	   {_, #{valueSum := NFvalueSum}} ->
	       S8#{valueSum => NFvalueSum};
	   {#{valueSum := PFvalueSum}, _} ->
	       S8#{valueSum => PFvalueSum};
	   {_, _} -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{time := NFtime}} -> S9#{time => NFtime};
	    {#{time := PFtime}, _} -> S9#{time => PFtime};
	    _ -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {_, #{updateTime := NFupdateTime}} ->
		S10#{updateTime => NFupdateTime};
	    {#{updateTime := PFupdateTime}, _} ->
		S10#{updateTime => PFupdateTime};
	    _ -> S10
	  end,
    case {PMsg, NMsg} of
      {_, #{link := NFlink}} -> S11#{link => NFlink};
      {#{link := PFlink}, _} -> S11#{link => PFlink};
      _ -> S11
    end.

-compile({nowarn_unused_function,'merge_msg_mainflux.SumValue'/3}).
'merge_msg_mainflux.SumValue'(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'mainflux.RawMessage' ->
	  'v_msg_mainflux.RawMessage'(Msg, [MsgName], TrUserData);
      'mainflux.Message' ->
	  'v_msg_mainflux.Message'(Msg, [MsgName], TrUserData);
      'mainflux.SumValue' ->
	  'v_msg_mainflux.SumValue'(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_mainflux.RawMessage'/3}).
-dialyzer({nowarn_function,'v_msg_mainflux.RawMessage'/3}).
'v_msg_mainflux.RawMessage'(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{channel := F1} ->
	  v_type_string(F1, [channel | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{subtopic := F2} ->
	  v_type_string(F2, [subtopic | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{publisher := F3} ->
	  v_type_string(F3, [publisher | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{protocol := F4} ->
	  v_type_string(F4, [protocol | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{contentType := F5} ->
	  v_type_string(F5, [contentType | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{payload := F6} ->
	  v_type_bytes(F6, [payload | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (channel) -> ok;
		      (subtopic) -> ok;
		      (publisher) -> ok;
		      (protocol) -> ok;
		      (contentType) -> ok;
		      (payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_mainflux.RawMessage'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'mainflux.RawMessage'},
		  M, Path);
'v_msg_mainflux.RawMessage'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'mainflux.RawMessage'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_mainflux.Message'/3}).
-dialyzer({nowarn_function,'v_msg_mainflux.Message'/3}).
'v_msg_mainflux.Message'(#{} = M, Path, TrUserData) ->
    case M of
      #{channel := F1} ->
	  v_type_string(F1, [channel | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{subtopic := F2} ->
	  v_type_string(F2, [subtopic | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{publisher := F3} ->
	  v_type_string(F3, [publisher | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{protocol := F4} ->
	  v_type_string(F4, [protocol | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F5} ->
	  v_type_string(F5, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{unit := F6} ->
	  v_type_string(F6, [unit | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := {floatValue, OF7}} ->
	  v_type_double(OF7, [floatValue, value | Path],
			TrUserData);
      #{value := {stringValue, OF7}} ->
	  v_type_string(OF7, [stringValue, value | Path],
			TrUserData);
      #{value := {boolValue, OF7}} ->
	  v_type_bool(OF7, [boolValue, value | Path], TrUserData);
      #{value := {dataValue, OF7}} ->
	  v_type_string(OF7, [dataValue, value | Path],
			TrUserData);
      #{value := F7} ->
	  mk_type_error(invalid_oneof, F7, [value | Path]);
      _ -> ok
    end,
    case M of
      #{valueSum := F8} ->
	  'v_msg_mainflux.SumValue'(F8, [valueSum | Path],
				    TrUserData);
      _ -> ok
    end,
    case M of
      #{time := F9} ->
	  v_type_double(F9, [time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{updateTime := F10} ->
	  v_type_double(F10, [updateTime | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{link := F11} ->
	  v_type_string(F11, [link | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (channel) -> ok;
		      (subtopic) -> ok;
		      (publisher) -> ok;
		      (protocol) -> ok;
		      (name) -> ok;
		      (unit) -> ok;
		      (value) -> ok;
		      (valueSum) -> ok;
		      (time) -> ok;
		      (updateTime) -> ok;
		      (link) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_mainflux.Message'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'mainflux.Message'},
		  M, Path);
'v_msg_mainflux.Message'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'mainflux.Message'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_mainflux.SumValue'/3}).
-dialyzer({nowarn_function,'v_msg_mainflux.SumValue'/3}).
'v_msg_mainflux.SumValue'(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_double(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_mainflux.SumValue'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'mainflux.SumValue'},
		  M, Path);
'v_msg_mainflux.SumValue'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'mainflux.SumValue'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'mainflux.RawMessage'},
      [#{name => channel, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => subtopic, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => publisher, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => protocol, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => contentType, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => payload, fnum => 6, rnum => 7, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'mainflux.Message'},
      [#{name => channel, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => subtopic, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => publisher, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => protocol, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => name, fnum => 5, rnum => 6, type => string,
	 occurrence => optional, opts => []},
       #{name => unit, fnum => 6, rnum => 7, type => string,
	 occurrence => optional, opts => []},
       #{name => value, rnum => 8,
	 fields =>
	     [#{name => floatValue, fnum => 7, rnum => 8,
		type => double, occurrence => optional, opts => []},
	      #{name => stringValue, fnum => 8, rnum => 8,
		type => string, occurrence => optional, opts => []},
	      #{name => boolValue, fnum => 9, rnum => 8, type => bool,
		occurrence => optional, opts => []},
	      #{name => dataValue, fnum => 10, rnum => 8,
		type => string, occurrence => optional, opts => []}]},
       #{name => valueSum, fnum => 11, rnum => 9,
	 type => {msg, 'mainflux.SumValue'},
	 occurrence => optional, opts => []},
       #{name => time, fnum => 12, rnum => 10, type => double,
	 occurrence => optional, opts => []},
       #{name => updateTime, fnum => 13, rnum => 11,
	 type => double, occurrence => optional, opts => []},
       #{name => link, fnum => 14, rnum => 12, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'mainflux.SumValue'},
      [#{name => value, fnum => 1, rnum => 2, type => double,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['mainflux.RawMessage', 'mainflux.Message',
     'mainflux.SumValue'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['mainflux.RawMessage', 'mainflux.Message',
     'mainflux.SumValue'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('mainflux.RawMessage') ->
    [#{name => channel, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => subtopic, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => publisher, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => protocol, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => contentType, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => payload, fnum => 6, rnum => 7, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('mainflux.Message') ->
    [#{name => channel, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => subtopic, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => publisher, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => protocol, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => name, fnum => 5, rnum => 6, type => string,
       occurrence => optional, opts => []},
     #{name => unit, fnum => 6, rnum => 7, type => string,
       occurrence => optional, opts => []},
     #{name => value, rnum => 8,
       fields =>
	   [#{name => floatValue, fnum => 7, rnum => 8,
	      type => double, occurrence => optional, opts => []},
	    #{name => stringValue, fnum => 8, rnum => 8,
	      type => string, occurrence => optional, opts => []},
	    #{name => boolValue, fnum => 9, rnum => 8, type => bool,
	      occurrence => optional, opts => []},
	    #{name => dataValue, fnum => 10, rnum => 8,
	      type => string, occurrence => optional, opts => []}]},
     #{name => valueSum, fnum => 11, rnum => 9,
       type => {msg, 'mainflux.SumValue'},
       occurrence => optional, opts => []},
     #{name => time, fnum => 12, rnum => 10, type => double,
       occurrence => optional, opts => []},
     #{name => updateTime, fnum => 13, rnum => 11,
       type => double, occurrence => optional, opts => []},
     #{name => link, fnum => 14, rnum => 12, type => string,
       occurrence => optional, opts => []}];
find_msg_def('mainflux.SumValue') ->
    [#{name => value, fnum => 1, rnum => 2, type => double,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"mainflux.RawMessage">>) -> 'mainflux.RawMessage';
fqbin_to_msg_name(<<"mainflux.Message">>) -> 'mainflux.Message';
fqbin_to_msg_name(<<"mainflux.SumValue">>) -> 'mainflux.SumValue';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('mainflux.RawMessage') -> <<"mainflux.RawMessage">>;
msg_name_to_fqbin('mainflux.Message') -> <<"mainflux.Message">>;
msg_name_to_fqbin('mainflux.SumValue') -> <<"mainflux.SumValue">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> mainflux.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "message.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["message.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["message"].


get_msg_containment("message") ->
    ['mainflux.Message', 'mainflux.RawMessage',
     'mainflux.SumValue'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("message") -> mainflux;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("message") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("message") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("message") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"mainflux.SumValue">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"mainflux.RawMessage">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"mainflux.Message">>) -> "message";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"mainflux">>) -> ["message"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.9.0".

gpb_version_as_list() ->
    [4,9,0].
